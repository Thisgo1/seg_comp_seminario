generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto] // Necess√°rio para UUID no PostgreSQL
}

model User {
  id        String   @id @default(uuid()) // Alterado para UUID
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publicKey PublicKey?

  purchases Purchase[]
  sessions  Session[]
}

model PublicKey {
  id        String   @id @default(uuid()) // Alterado para UUID
  key       String   @db.Text
  algorithm String   @default("ES256")
  createdAt DateTime @default(now())
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique // Alterado para String (UUID)
}

model Session {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   // Alterado para String (UUID)
  refreshToken String   @unique
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model Purchase {
  id        String   @id @default(uuid()) // Alterado para UUID
  amount    Float
  items     Json
  signature String
  status    String   @default("pending")
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique // Alterado para String (UUID)
}

model AuditLog {
  id        String   @id @default(uuid()) // Alterado para UUID
  action    String
  userId    String?  // Alterado para String? (UUID)
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())
}
